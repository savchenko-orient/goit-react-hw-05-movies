{"version":3,"file":"static/js/947.6eecec96.chunk.js","mappings":"qSAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qIAGoBN,EAASO,IAH7B,+CAGKC,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,2HAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kFACCC,EADD,iBACmBD,GADnB,kBAGoBX,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,kFACCC,EADD,iBACmBD,EADnB,8BAGoBX,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kFACCC,EADD,iBACmBD,EADnB,8BAGoBX,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kFACCJ,EADD,8BACgCI,GADhC,kBAGoBhB,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H,gHC4CP,UA1FqB,WAAO,IAAD,IACjBS,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,oGAEZF,GAAW,GAFC,UAGOZ,EAAAA,EAAAA,IAAgBO,GAHvB,OAGNT,EAHM,OAIZY,EAAQZ,GACRc,GAAW,GALC,gDAOZG,QAAQC,IAAR,MAPY,yBASZJ,GAAW,GATC,4EAAH,qDAYbE,GACD,GAAE,CAACP,IAEJ,IAKkBU,EALFC,EAWVC,EAAQ,qBAFGC,EAAAA,EAAAA,MAESC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAEzC,OACE,iCACE,SAAC,KAAD,CAAMC,GAAIJ,EAAV,qBAGCR,EACC,cAEA,iCACE,2BACGb,EAAK0B,aACJ,gBACEC,IAAK3B,EAAK4B,eACVC,IAAG,yCAAoC7B,EAAK0B,gBAG9C,gBAAKC,IAAI,mBAGX,4BACE,0BACG3B,EAAK4B,eADR,MAjCIR,EAkC8BpB,EAAK8B,aAjCpC,IAAIC,KAAKX,GACVY,eA+BF,QAGA,2CACsC,GAApBhC,EAAKiC,cADvB,QAGA,qCACA,uBAAIjC,EAAKkC,YACT,mCACA,wBArCMf,EAqCQnB,EAAKmC,OApCtBhB,EAAUiB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,gBAuCzC,0BACE,2BACE,yBACE,SAAC,KAAD,CAAMd,GAAG,OAAOF,MAAO,CAAEC,KAAMH,GAA/B,UACE,0CAGJ,yBACE,SAAC,KAAD,CAAMI,GAAG,UAAUF,MAAO,CAAEC,KAAMH,GAAlC,UACE,kDAKR,SAAC,EAAAmB,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,WAMX,C","sources":["components/Api/api.js","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '31449444226ba6345698313fe055564a',\n    language: 'en-US',\n  },\n});\n\nexport async function getTrendingMovies() {\n  const query = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(query);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieDetails(id) {\n  const query = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieCast(id) {\n  const query = `/movie/${id}/credits`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieReviews(id) {\n  const query = `/movie/${id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovie(queryString) {\n  const query = `/search/movie?query=${queryString}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n","import { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { getMovieDetails } from '../Api/api';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const data = await getMovieDetails(movieId);\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, [movieId]);\n\n  const getYear = releaseDate => {\n    const date = new Date(releaseDate);\n    return date.getFullYear();\n  };\n\n  const getGenres = arrGenres => {\n    return arrGenres.map(genre => genre.name).join(', ');\n  };\n\n  const location = useLocation();\n\n  const cameBack = location.state?.from ?? '/';\n\n  return (\n    <>\n      <Link to={cameBack}>\n        Go Back\n      </Link>\n      {loading ? (\n        'Loading...'\n      ) : (\n        <>\n          <div >\n            {data.poster_path ? (\n              <img\n                alt={data.original_title}\n                src={`https://image.tmdb.org/t/p/w500${data.poster_path}`}\n              />\n            ) : (\n              <img alt=\"not available\" />\n            )}\n\n            <div >\n              <h1>\n                {data.original_title} ({getYear(data.release_date)})\n              </h1>\n              <p >\n                User Score: {~~(data.vote_average * 10)}%\n              </p>\n              <p >Overview</p>\n              <p>{data.overview}</p>\n              <p >Genres</p>\n              <p>{getGenres(data.genres)}</p>\n            </div>\n          </div>\n          <div>\n            <ul >\n              <li>\n                <Link to=\"cast\" state={{ from: cameBack }}>\n                  <button >Cast</button>\n                </Link>\n              </li>\n              <li>\n                <Link to=\"reviews\" state={{ from: cameBack }}>\n                  <button >Reviews</button>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["instance","axios","baseURL","params","api_key","language","getTrendingMovies","get","data","results","getMovieDetails","id","query","getMovieCast","getMovieReviews","searchMovie","queryString","movieId","useParams","useState","setData","loading","setLoading","useEffect","getData","console","log","arrGenres","releaseDate","cameBack","useLocation","state","from","to","poster_path","alt","original_title","src","release_date","Date","getFullYear","vote_average","overview","genres","map","genre","name","join","Suspense","fallback"],"sourceRoot":""}